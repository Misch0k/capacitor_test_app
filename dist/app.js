const { Capacitor } = window;
const { Toast } = Capacitor.Plugins;
const { Network } = Capacitor.Plugins;
const { Geolocation } = Capacitor.Plugins;
const { Browser } = Capacitor.Plugins;
const { Camera } = Capacitor.Plugins;

const CameraResultType = {
    Uri: 'uri',
    Base64: 'base64',
    DataUrl: 'dataUrl'
};

const CameraSource = {
    Prompt: 'PROMPT',
    Camera: 'CAMERA',
    Photos: 'PHOTOS'
};

class CapacitorTestApp {
    constructor() {
        this.init();
    }

    async init() {
        await this.showSplashScreen();

        this.displayPlatformInfo();
        this.setupNetworkListener();
        await this.checkNetworkStatus();

        setTimeout(() => {
            this.hideSplashScreen();
        }, 2000);
    }

    displayPlatformInfo() {
        const platformInfo = document.getElementById('platform-info');
        
        if(typeof Capacitor !== 'undefined') {
            platformInfo.innerHTML = `
                <strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${Capacitor.getPlatform()}<br>
            `;
        } else {
            platformInfo.innerHTML = '<strong>Capacitor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</strong> (–∑–∞–ø—É—â–µ–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)';
        }
    }

    async checkNetworkStatus() {
        const networkStatus = document.getElementById('network-status');
        
        if(typeof Network !== 'undefined') {
            try {
                const status = await Network.getStatus();
                networkStatus.innerHTML = `
                    <strong>–°–µ—Ç—å:</strong> ${status.connected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}<br>
                    <strong>–¢–∏–ø:</strong> ${status.connectionType}
                `;
            } catch (error) {
                networkStatus.innerHTML = '<strong>–°–µ—Ç—å:</strong> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏';
            }
        } else {
            networkStatus.innerHTML = '<strong>–°–µ—Ç—å:</strong> Network API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        }
    }

    setupNetworkListener() {
        if(typeof Network !== 'undefined') {
            Network.addListener('networkStatusChange', (status) => {
                // this.addResult(`–°–µ—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ${status.connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}`);
                this.checkNetworkStatus();
            });
        }
    }

    addResult(message, error_flag=false) {
        const results = document.getElementById('results');
        const resultItem = document.createElement('div');
        resultItem.style.cssText = `
            padding: 10px;
            margin: 8px 0;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
        `;
        if (error_flag) {
            resultItem.style.borderLeft = '4px solid #ff0000';
        } else {
            resultItem.style.borderLeft = '4px solid #2200ff';
        }
        resultItem.textContent = `${new Date().toLocaleTimeString()}: ${message}`;
        results.appendChild(resultItem);

        resultItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    // ================== SPLASH SCREEN ================== //

    async showSplashScreen() {
        if (typeof Capacitor !== 'undefined' && Capacitor.isPluginAvailable('SplashScreen')) {
            try {
                await Capacitor.Plugins.SplashScreen.show({
                    autoHide: true,
                    fadeInDuration: 300,
                    fadeOutDuration: 300
                });
                this.addResult('–ù–∞—Ç–∏–≤–Ω—ã–π splash screen –ø–æ–∫–∞–∑–∞–Ω');
            } catch (error) {
                this.addResult('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ splash screen: ' + error.message, error_flag=true);
            }
        } else {
            this.addResult('SplashScreen API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
        }
    }

    // ================== –ù–ê–¢–ò–í–ù–û–ï –ú–ï–ù–Æ ================== //

    async showNativeMenu() {
        if (typeof Capacitor !== 'undefined' && Capacitor.isPluginAvailable('ActionSheet')) {
            try {
                const result = await Capacitor.Plugins.ActionSheet.showActions({
                    title: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                    message: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏',
                    options: [
                        { title: 'üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ', style: 'default' },
                        { title: 'üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è', style: 'default' },
                        { title: 'üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç—å', style: 'default' },
                        { title: '‚ùå –û—Ç–º–µ–Ω–∞', style: 'cancel' }
                    ]
                });

                this.handleMenuSelection(result.index);

            } catch (error) {
                this.addResult('‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é: ' + error.message, error_flag=true);
            }
        } else {
            this.addResult('ActionSheet API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
        }
    }

    handleMenuSelection(selectedIndex) {
        const actions = [
            () => takePicture(),
            () => getGeolocation(),
            () => getNetworkStatus(),
            () => this.addResult('üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        ];

        if (actions[selectedIndex]) {
            actions[selectedIndex].call(this);
        }
    }

    // ================== –ù–ê–¢–ò–í–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ================== //

    async showNativeNotification(title, message) {
        if (typeof Capacitor !== 'undefined' && Capacitor.isPluginAvailable('LocalNotifications')) {
            try {
                await Capacitor.Plugins.LocalNotifications.schedule({
                    notifications: [
                        {
                            title: title,
                            body: message,
                            id: Math.floor(Math.random() * 10000) + 1,
                            schedule: { at: new Date(Date.now() + 1000) },
                            sound: 'default',
                            channelId: 'default_channel', // –í–∞–∂–Ω–æ –¥–ª—è Android!
                        }
                    ]
                });
                this.addResult('–ù–∞—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ');
            } catch (error) {
                this.addResult('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ' + error.message, error_flag=true);
            }
        } else {
            this.addResult('LocalNotifications API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
        }
    }

    // ================== –ù–ê–¢–ò–í–ù–´–ô SHARE ================== //

    async shareContent(text, url) {
        if (typeof Capacitor !== 'undefined' && Capacitor.isPluginAvailable('Share')) {
            try {
                await Capacitor.Plugins.Share.share({
                    title: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                    text: text,
                    url: url,
                    dialogTitle: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å'
                });
                this.addResult('–ù–∞—Ç–∏–≤–Ω—ã–π share –≤—ã–ø–æ–ª–Ω–µ–Ω');
            } catch (error) {
                if (error.message == 'Share canceled') {
                    app.addResult('üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
                } else {
                    this.addResult('‚ùå –û—à–∏–±–∫–∞ share: ' + error.message, error_flag=true);
                }
            }
        } else {
            this.addResult('Share API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
        }
    }

    // ================== DEEP LINKS ================== //

    handleDeepLink(url) {
        this.addResult(`üì® –ü–æ–ª—É—á–µ–Ω–æ: ${url}`);

        const cleanUrl = url.replace('myapp://', '');
        const [path, query] = cleanUrl.split('?');
        const params = {};
        
        if (query) {
            query.split('&').forEach(pair => {
                const [key, value] = pair.split('=');
                params[key] = value ? decodeURIComponent(value) : '';
            });
        }

        switch (path) {
            case 'home':
                this.handleHome(params);
                break;
                
            case 'product':
                this.handleProduct(params);
                break;
                
            case 'profile':
                this.handleProfile(params);
                break;
                
            case 'settings':
                this.handleSettings(params);
                break;
                
            default:
                this.handleUnknown(path, params);
        }
    }

    handleHome(params) {
        this.addResult('üè† –û—Ç–∫—Ä—ã—Ç–∞ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
        if (params.section) {
            this.addResult(`üìÇ –†–∞–∑–¥–µ–ª: ${params.section}`);
        }
    }

    handleProduct(params) {
        if (params.id) {
            this.addResult(`üì¶ –û—Ç–∫—Ä—ã—Ç –¢–æ–≤–∞—Ä #${params.id}`);
            if (params.name) {
                this.addResult(`üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: ${params.name}`);
            }
        } else {
            this.addResult('‚ùå ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω', error_flag=true);
        }
    }

    handleProfile(params) {
        const userId = params.id || '—Ç–µ–∫—É—â–∏–π';
        this.addResult(`üë§ –û—Ç–∫—Ä—ã—Ç –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        if (params.tab) {
            this.addResult(`üìë –í–∫–ª–∞–¥–∫–∞: ${params.tab}`);
        }
    }

    handleSettings(params) {
        this.addResult('‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—ã –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
        if (params.theme) {
            this.addResult(`üé® –¢–µ–º–∞: ${params.theme}`);
        }
        if (params.lang) {
            this.addResult(`üåê –Ø–∑—ã–∫: ${params.lang}`);
        }
    }

    handleUnknown(path, params) {
        this.addResult(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å: ${path}`);
        this.addResult(`üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(params)}`);
    }
}

async function showToast() {
    if(typeof Toast !== 'undefined') {
        await Toast.show({
            text: 'Hello! üéâ',
            duration: 'long'
        });
        app.addResult('Toast –ø–æ–∫–∞–∑–∞–Ω');
    } else {
        app.addResult('Toast API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
    }
}

async function getNetworkStatus() {
    await app.checkNetworkStatus();
    app.addResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
}

async function getGeolocation() {
    if(typeof Geolocation !== 'undefined') {
        try {
            const position = await Geolocation.getCurrentPosition();
            app.addResult(`–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: ${position.coords.latitude}, ${position.coords.longitude}`);
        } catch (error) {
            app.addResult('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ' + error.message, error_flag=true);
        }
    } else {
        app.addResult('Geolocation API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
    }
}

async function openBrowser() {
    if(typeof Browser !== 'undefined') {
        await Browser.open({ url: 'https://google.com' });
        app.addResult('–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç');
    } else {
        app.addResult('Browser API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
    }
}

async function takePicture() {
    if(typeof Camera !== 'undefined') {
        try {
            const image = await Camera.getPhoto({
                quality: 90,
                allowEditing: true,
                resultType: CameraResultType.Uri
            });
            app.addResult('–§–æ—Ç–æ —Å–¥–µ–ª–∞–Ω–æ: ' + image.webPath);
        } catch (error) {
            if (error.message == 'User cancelled photos app') {
                app.addResult('üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
            } else {
                app.addResult('‚ùå –û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: ' + error.message);
            }
        }
    } else {
        app.addResult('Camera API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
    }
}

async function openInWebView() {
    const url = 'https://google.com';
    
    const options = {
        location: 'yes',
        hidden: 'no',
        toolbar: 'yes',
        zoom: 'yes',
        clearcache: 'no',
        clearsessioncache: 'no',
        closebuttoncaption: '–ó–∞–∫—Ä—ã—Ç—å',
        disallowoverscroll: 'no',
        enableViewportScale: 'no',
        presentationstyle: 'pagesheet'
    };

    if (typeof window !== 'undefined' && window.cordova && window.cordova.InAppBrowser) {
        try {
            const optionsString = Object.entries(options)
                .map(([key, value]) => `${key}=${value}`)
                .join(',');
            
            const browserRef = window.cordova.InAppBrowser.open(url, '_blank', optionsString);
            
            browserRef.addEventListener('loadstart', (event) => {
                console.log('WebView loadstart:', event.url);
                app.addResult(`‚ÜóÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞: ${event.url}`);
            });
            
            browserRef.addEventListener('loadstop', (event) => {
                console.log('WebView loadstop:', event.url);
                app.addResult(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${event.url}`);
                
                browserRef.executeScript({
                    code: `
                        document.body.style.backgroundColor = '#f0f8ff';
                        console.log('JavaScript injected from Capacitor app');
                    `
                });
            });
            
            browserRef.addEventListener('loaderror', (event) => {
                console.error('WebView error:', event.message);
                app.addResult(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${event.message}`, error_flag=true);
            });
            
            browserRef.addEventListener('exit', () => {
                app.addResult('üîô WebView –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            });
            
        } catch (error) {
            console.error('InAppBrowser error:', error);
        }
    } else {
        app.addResult('InAppBrowser API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
    }
}

async function openNativeWebView() {
    if (typeof Capacitor !== 'undefined' && Capacitor.Plugins.WebView) {
        try {
            await Capacitor.Plugins.WebView.open({
                url: 'https://google.com',
                headers: {
                    'X-Custom-Header': 'Value'
                },
                toolbarColor: '#667eea',
                showTitle: true
            });
            app.addResult('–û—Ç–∫—Ä—ã—Ç–æ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º WebView');
        } catch (error) {
            app.addResult('–û—à–∏–±–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ WebView: ' + error.message, error_flag=true);
        }
    } else {
        app.addResult('WebView API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', error_flag=true);
    }
}

function clearResults() {
    const output = document.getElementById('results');
    output.innerHTML = '';
    app.addDeepLinkResult('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã');
}

function openNativeMenu() {
    app.showNativeMenu();
}

function shareTest() {
    app.shareContent('–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!', 'https://example.com');
}

function showNotification() {
    app.showNativeNotification('–¢–µ—Å—Ç', '–≠—Ç–æ –Ω–∞—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!');
}

async function showDeepLinkMenu() {
    if (typeof Capacitor !== 'undefined' && Capacitor.isPluginAvailable('ActionSheet')) {
        showNativeDeepLinkMenu();
    } else {
        app.addResult('–û—à–∏–±–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é Deep Links: ' + error.message, error_flag=true);
    }
}

async function showNativeDeepLinkMenu() {
    try {
        const result = await Capacitor.Plugins.ActionSheet.showActions({
            title: '–í—ã–±–µ—Ä–∏—Ç–µ Deep Link –¥–ª—è —Ç–µ—Å—Ç–∞',
            message: '–ö–∞–∫—É—é —Å—Å—ã–ª–∫—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?',
            options: [
                { title: 'üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', style: 'default' },
                { title: 'üì¶ –¢–æ–≤–∞—Ä', style: 'default' },
                { title: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', style: 'default' },
                { title: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', style: 'default' },
                { title: '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å', style: 'default' },
                { title: '‚ùå –û—Ç–º–µ–Ω–∞', style: 'cancel' }
            ]
        });

        handleMenuSelection(result.index);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
        app.addResult('–û—à–∏–±–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é Deep Links: ' + error.message, error_flag=true);
    }
}

function handleMenuSelection(selectedIndex) {
    const actions = [
        () => testDeepLink('myapp://home'),
        () => testDeepLink('myapp://product?id=100&name=iPhone15'),
        () => testDeepLink('myapp://profile?id=456&username=user'),
        () => testDeepLink('myapp://settings?theme=dark&lang=ru'),
        () => testDeepLink('myapp://unknown/path?param=test'),
        () => app.addResult('üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    ];

    if (actions[selectedIndex]) {
        actions[selectedIndex]();
    }
}

function testDeepLink(url) {
    if (app && app.handleDeepLink) {
        app.handleDeepLink(url);
    } else {
        alert('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new CapacitorTestApp();
});